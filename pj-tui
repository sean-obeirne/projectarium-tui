#!/usr/bin/env fish

# Projectarium TUI CLI Manager
# Global command: pj-tui

set TUI_DIR ~/code/projectariums/projectarium-tui
set CONFIG_FILE ~/.config/projectarium-tui.env
set BIN_PATH ~/bin/pj-tui

function show_help
    echo "pj-tui - Projectarium TUI Manager"
    echo ""
    echo "Usage: pj-tui [command]"
    echo ""
    echo "Commands:"
    echo "  run                 Run the TUI application"
    echo "  config set <ip>     Set API server address"
    echo "  config local        Use local server (localhost:8888)"
    echo "  config show         Show current configuration"
    echo "  config check        Test connection to API server"
    echo "  config edit         Edit config file directly"
    echo "  install             Install pj-tui globally"
    echo "  build               Build the TUI application"
    echo "  update              Pull latest code and rebuild"
    echo "  help, --help        Show this help message"
    echo ""
    echo "Examples:"
    echo "  pj-tui run                      # Launch the TUI"
    echo "  pj-tui config set 192.168.1.100 # Connect to remote server"
    echo "  pj-tui config local             # Switch to local server"
    echo "  pj-tui config check             # Test API connection"
end

function ensure_config_dir
    mkdir -p (dirname $CONFIG_FILE)
end

function set_server
    set server_ip $argv[1]
    
    if test -z "$server_ip"
        echo "‚ùå Error: Server IP required"
        echo "Usage: pj-tui config set <server-ip>"
        exit 1
    end
    
    ensure_config_dir
    set api_url "http://$server_ip:8888/api"
    
    echo "üîß Setting API server to: $api_url"
    echo "PROJECTARIUM_API_URL=$api_url" > $CONFIG_FILE
    echo "‚úÖ Configuration saved!"
    echo ""
    check_connection
end

function set_local
    ensure_config_dir
    set api_url "http://localhost:8888/api"
    echo "üè† Setting API server to local: $api_url"
    echo "PROJECTARIUM_API_URL=$api_url" > $CONFIG_FILE
    echo "‚úÖ Configuration saved!"
end

function show_config
    if test -f $CONFIG_FILE
        echo "üìã Current configuration:"
        echo ""
        cat $CONFIG_FILE
    else
        echo "‚ö†Ô∏è  No configuration file found."
        echo "   Default: http://localhost:8888/api"
        echo ""
        echo "Set a server with: pj-tui config set <server-ip>"
    end
end

function check_connection
    # Load config if exists
    if test -f $CONFIG_FILE
        # Parse the config file manually (KEY=VALUE format)
        for line in (cat $CONFIG_FILE)
            if test -n "$line"; and not string match -q '#*' $line
                set -l parts (string split '=' $line)
                if test (count $parts) -eq 2
                    set -gx $parts[1] $parts[2]
                end
            end
        end
    end
    
    set api_url (string trim $PROJECTARIUM_API_URL)
    if test -z "$api_url"
        set api_url "http://localhost:8888/api"
    end
    
    echo "üîç Testing connection to: $api_url"
    
    # Extract base URL (remove /api)
    set base_url (string replace -r '/api$' '' $api_url)
    
    # Try health check
    set response (curl -s -o /dev/null -w "%{http_code}" $base_url/health 2>/dev/null)
    
    if test "$response" = "200"
        echo "‚úÖ Server is reachable and healthy!"
    else if test "$response" = "000"
        echo "‚ùå Cannot reach server - connection failed"
        echo ""
        echo "Troubleshooting:"
        echo "  1. Is the server running? Try: pj status"
        echo "  2. Check the IP address: pj-tui config show"
        echo "  3. Can you ping it? ping "(string replace -r 'http://|:.*' '' $base_url)
    else
        echo "‚ö†Ô∏è  Server responded with HTTP $response"
        echo "   Expected: HTTP 200"
    end
end

function edit_config
    ensure_config_dir
    
    if not test -f $CONFIG_FILE
        echo "# Projectarium TUI Configuration" > $CONFIG_FILE
        echo "PROJECTARIUM_API_URL=http://localhost:8888/api" >> $CONFIG_FILE
    end
    
    if test -n "$EDITOR"
        $EDITOR $CONFIG_FILE
    else if command -v nvim > /dev/null
        nvim $CONFIG_FILE
    else if command -v vim > /dev/null
        vim $CONFIG_FILE
    else if command -v nano > /dev/null
        nano $CONFIG_FILE
    else
        echo "‚ùå No editor found. Please set \$EDITOR or install vim/nano"
        echo "   Config file location: $CONFIG_FILE"
        exit 1
    end
    
    echo "‚úÖ Config updated! Checking connection..."
    check_connection
end

function run_tui
    if not test -d $TUI_DIR
        echo "‚ùå TUI directory not found: $TUI_DIR"
        echo "   Please update TUI_DIR in this script"
        exit 1
    end
    
    # Load config if exists
    if test -f $CONFIG_FILE
        # Parse the config file manually (KEY=VALUE format)
        for line in (cat $CONFIG_FILE)
            if test -n "$line"; and not string match -q '#*' $line
                set -l parts (string split '=' $line)
                if test (count $parts) -eq 2
                    set -gx $parts[1] $parts[2]
                end
            end
        end
    end
    
    cd $TUI_DIR
    
    # Check if binary exists and if source files are newer
    set binary bin/projectarium-tui
    set needs_build false
    
    if not test -f $binary
        set needs_build true
    else
        # Check if any Go files are newer than the binary
        for gofile in (find . -name "*.go" -newer $binary 2>/dev/null)
            set needs_build true
            break
        end
    end
    
    if test "$needs_build" = "true"
        echo "üèóÔ∏è  Building TUI..."
        make build
        if not test -f $binary
            echo "‚ùå Build failed"
            exit 1
        end
    end
    
    ./$binary
end

function build_tui
    if not test -d $TUI_DIR
        echo "‚ùå TUI directory not found: $TUI_DIR"
        exit 1
    end
    
    echo "üèóÔ∏è  Building TUI..."
    cd $TUI_DIR
    make build
    echo "‚úÖ Build complete!"
end

function update_tui
    if not test -d $TUI_DIR
        echo "‚ùå TUI directory not found: $TUI_DIR"
        exit 1
    end
    
    echo "üîÑ Updating TUI..."
    cd $TUI_DIR
    git pull
    echo ""
    echo "üèóÔ∏è  Rebuilding..."
    make build
    echo "‚úÖ Update complete!"
end

function install_global
    set script_path (realpath (status -f))
    
    echo "üì¶ Installing pj-tui globally..."
    
    # Ensure ~/bin exists
    mkdir -p ~/bin
    
    # Create symlink
    ln -sf $script_path ~/bin/pj-tui
    chmod +x $script_path
    
    echo "‚úÖ Installed to ~/bin/pj-tui"
    
    # Check if ~/bin is in PATH
    if not contains ~/bin $PATH
        echo ""
        echo "‚ö†Ô∏è  ~/bin is not in your PATH"
        echo "   Add this to your ~/.config/fish/config.fish:"
        echo "   set -gx PATH ~/bin \$PATH"
    else
        echo "‚úÖ Ready to use! Try: pj-tui --help"
    end
end

# Main logic
set cmd $argv[1]

switch $cmd
    case run ''
        run_tui
        
    case config
        set subcmd $argv[2]
        switch $subcmd
            case set
                set_server $argv[3]
            case local
                set_local
            case show
                show_config
            case check
                check_connection
            case edit
                edit_config
            case '*'
                echo "‚ùå Unknown config command: $subcmd"
                echo ""
                echo "Available: set, local, show, check, edit"
                exit 1
        end
        
    case build
        build_tui
        
    case update
        update_tui
        
    case install
        install_global
        
    case help --help -h
        show_help
        
    case '*'
        echo "‚ùå Unknown command: $cmd"
        echo ""
        show_help
        exit 1
end
